<?php

/**
 * @file
 * Implementation of Entity Product Canvas.
 */

/**
 * Implements hook_entity_info().
 */
function product_canvas_entity_info() {
  $return['product_canvas'] = array(
    'label' => t('Product Canvas'),
    // The entity class and controller class extend the default entity classes.
    'entity class' => 'ProductCanvas',
    'controller class' => 'ProductCanvasController',
    'base table' => 'product_canvas',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'product_canvas_id',
      'bundle' => 'type',
    ),
    // Bundles are defined by the types below.
    'bundles' => array(),
    'bundle keys' => array('bundle' => 'type'),
    'label callback' => 'product_canvas_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'product_canvas_access',
    'module' => 'product_canvas',
    // The information below is used by the Controller;
    // which extends the EntityDefaultUIController.
    'admin ui' => array(
      'path' => 'admin/content/product_canvas',
      'file' => 'includes/product_canvas.admin.inc',
      'controller class' => 'ProductCanvasUIController',
      'menu wildcard' => '%product_canvas',
    ),
  );
  // The entity that holds information about the entity types.
  $return['product_canvas_type'] = array(
    'label' => t('Product Canvas Type'),
    'entity class' => 'ProductCanvasType',
    'controller class' => 'ProductCanvasTypeController',
    'base table' => 'product_canvas_type',
    'fieldable' => FALSE,
    'bundle of' => 'product_canvas',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'product_canvas_type_access',
    'module' => 'product_canvas',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/product_canvas_types',
      'file' => 'includes/product_canvas_type.admin.inc',
      'controller class' => 'ProductCanvasTypeUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function product_canvas_entity_info_alter(&$entity_info) {
  foreach (product_canvas_get_types() as $type => $info) {
    $entity_info['product_canvas']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/product_canvas_types/manage/%product_canvas_type',
        'real path' => 'admin/structure/product_canvas_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer product canvas types'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function product_canvas_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity.
  $permissions = array(
    'administer product canvas types' => array(
      'title' => t('Administer Product Canvas types'),
      'description' => t('Create and delete fields for Product Canvas types, and set their permissions.'),
    ),
    'administer product canvas' => array(
      'title' => t('Administer Product Canvas'),
      'description' => t('Edit and delete all Product Canvas'),
    ),
    'product_canvas_access' => array(
      'title' => t('View product canvas'),
      'description' => t('Permission: view product canvas'),
    ),
  );

  // Generate permissions.
  foreach (product_canvas_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name product canvas" => array(
        'title' => t('%type_name: Edit any Product Canvas', array('%type_name' => $type->label)),
      ),
      "view any $type_name product canvas" => array(
        'title' => t('%type_name: View any Product Canvas', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/** 
 * Implements hook_theme().
 */
function product_canvas_theme() {
  return array(
   'product_canvas' => array(
       'render element' => 'elements',
       'template' => 'product_canvas',
    ),
       'test' => array(
        'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function product_canvas_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/product_canvas/add'
  // on 'admin/structure/product_canvas'.
  if ($root_path == 'admin/content/product_canvas') {
    $item = menu_get_item('admin/content/product_canvas/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Determines whether the given user has access to a Product Canvas.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 *
 * @param object $entity
 *   Optionally a Product Canvas or a Product Canvas type to check access for.
 *   If nothing is given, access for all Product Canvas is determined.
 *
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function product_canvas_access($op, $entity = NULL, $account = NULL) {
  if (user_access('administer product canvas', $account)) {
    return TRUE;
  }

  if (isset($entity) && $type_name = $entity->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name product canvas", $account)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Entity label callback.
 */
function product_canvas_label($entity, $entity_type) {
  return empty($entity) ? t('New Product Canvas') : $entity->label;
}

/**
 * Access callback for the entity API.
 */
function product_canvas_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer product canvas types', $account);
}

/**
 * Gets an array of all Product Canvas types, keyed by the type name.
 *
 * @param string $type_name
 *   If set, the type with the given name is returned.
 *
 * @return array
 *   Depending whether $type isset, an array of Product Canvas types
 *   or a single one.
 */
function product_canvas_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our Product Canvas entity
  // and call the load function of that object.
  // We are loading entities by name here.
  $types = entity_load_multiple_by_name('product_canvas_type', isset($type_name) ? array($type_name) : FALSE);

  return isset($type_name) ? reset($types) : $types;
}

/**
 * Menu argument loader; Load a Product Canvas type by string.
 *
 * @param string $type
 *   The machine-readable name of a Product Canvas type to load.
 *
 * @return mixed
 *   A Product Canvas type array or FALSE if $type does not exist.
 */
function product_canvas_type_load($type) {
  return product_canvas_get_types($type);
}

/**
 * Fetch a Product Canvas object.
 *
 * @param int $product_canvas_id
 *   Integer specifying the product_canvas id.
 *
 * @return object
 *   A fully-loaded object or FALSE if it cannot be loaded.
 *
 * @see entity_load_single()
 */
function product_canvas_load($product_canvas_id) {
  return entity_load_single('product_canvas', $product_canvas_id);
}

/**
 * Load multiple Product Canvas based on certain conditions.
 *
 * @param array $product_canvas_ids
 *   An array of Product Canvas IDs.
 *
 * @param array $conditions
 *   An array of conditions to match against the product_canvas table.
 *
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of objects, indexed by product_canvas_id.
 *
 * @see entity_load()
 * @see product_canvas_load()
 */
function product_canvas_load_multiple($product_canvas_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('product_canvas', $product_canvas_ids, $conditions, $reset);
}

/**
 * Deletes a Product Canvas.
 */
function product_canvas_delete(ProductCanvas $product_canvas) {
  $product_canvas->delete();
}

/**
 * Delete multiple Product Canvas.
 *
 * @param array $product_canvas_ids
 *   An array of Product Canvas IDs.
 */
function product_canvas_delete_multiple(array $product_canvas_ids) {
  return entity_delete_multiple('product_canvas', $product_canvas_ids);
}

/**
 * Create a Product Canvas object.
 */
function product_canvas_create($values = array()) {
  return entity_create('product_canvas', $values);
}

/**
 * Saves a Product Canvas to the database.
 *
 * @param string $product_canvas
 *   The Product Canvas object.
 */
function product_canvas_save($product_canvas) {
  return entity_save('product_canvas', $product_canvas);
}

/**
 * Saves a Product Canvas type to the db.
 */
function product_canvas_type_save($type) {
  return entity_save('product_canvas_type', $type);
}

/**
 * Deletes a Product Canvas type from the db.
 */
function product_canvas_type_delete(ProductCanvasType $type) {
  $type->delete();
}

/**
 * Menu title callback for showing individual entities.
 */
function product_canvas_page_title(ProductCanvas $product_canvas) {
  return $product_canvas->label;
}


// Create a path to send our AJAX request to.   

   function  product_canvas_menu() { 

   $items = array();

   $items['product_canvas/%product_canvas'] = array(
    'title' => 'Create',
    'page callback' => 'product_canvas_page_view',
    'page arguments' => array(1),
    'access arguments' => array('product_canvas_access'),
  );    

  $items['product_canvas/%product_canvas/canvas-save'] = array( 
   'title callback' => 'product_canvas_canvas_save_page_title',
   'page callback' => 'product_canvas_canvas_save',
   'page arguments' => array(1),
   'access arguments' => array('product_canvas_access'),
   'type' => MENU_CALLBACK, );

    $items['product_canvas/%product_canvas/product_canvas_upload_form'] = array(
    'title' => 'Image upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_canvas_upload_form'),
    'access callback' => TRUE,
    'description' => 'T-shirt: Image upload',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

   //$items['file/ajax']['file'] = 'node.pages.inc';
   //$items['file/ajax']['file path'] = drupal_get_path('module', 'node');
   return $items;
 }


 function product_canvas_get_library() {

   $path = FALSE;

  if (function_exists('libraries_get_path')) {
    $path = libraries_get_path('product_canvas') . 'js/fabric.js';
    if (!file_exists($path)) {
      $path = libraries_get_path('product_canvas') . 'js/fabric.min.js';
    }
    elseif (!file_exists($path)) {
      $path = FALSE;
    }
  }
  elseif (file_exists('sites/all/libraries/fabric/fabric.min.js')) {
    $path = 'sites/all/libraries/fabric/dist/fabric.min.js';
  }
  elseif (file_exists('sites/all/libraries/fabric/fabric.js')) {
    $path = 'sites/all/libraries/fabric/dist/fabric.js';
  }

  return $path;
}


        function product_canvas_upload_form ($form, &$form_state) {

        $form['image'] = array(
    '#type' => 'media',
    '#title' => 'Image',
    '#description' => t('Choose an image'), 
    '#default_value' => isset($product_canvas->image) ? $product_canvas->image : '' ,
    '#theme' => 'media_widget',
    '#media_options' => array(
      'global' => array(
        'types' => array('image'),
        'enabledPlugins' => array(
          'upload',
          'media_default--media_browser_my_files'
        ),
        'schemes' => array(
          'public' => 'public',
        ),
        'file_directory' => 'canvas',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '2 MB',
        'uri_scheme' => 'public',
      ),
    ),
  );
     
     $form['#attributes'] = array('class' => 'img-polaroid');
     $form['#prefix'] = '<div class="well">';
     $form['#suffix'] = '</div>'; 

      return $form ;
  }

  function  product_canvas_upload_form_validate($form, &$form_state) {
     $file = file_save_upload('item', array(
    'file_validate_is_image' => array(),
    'file_validate_extensions' => array('png gif jpg jpeg'),
  ));

  if ($file) {
   if ($file = file_move($file, 'public://')) {
      // Save the file for use in the submit handler.
      $form_state['storage']['file'] = $file;
      }else { form_set_error('file', t("Failed to write the uploaded file to the site's file folder."));
          }
        }
     else {form_set_error('file', t('Your file was uploaded.'));
         }
       }

   
  function product_canvas_upload_form_submit($form, $form_state){
      if (isset($form_state['values']['image'])) {
    $file = file_load($form_state['values']['image']); 
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    //file_usage_add($file, 'product_canvas', 'product_canvas', $product_canvas->product_canvas_id);
    file_usage_add($file, 'product_canvas', 'product_canvas', array(1));
    $product_canvas->image = $file->fid;
  }
 }


  function product_canvas_canvas_save($product_canvas) {

  $raw_data = $_POST['imagedata'];
  $filtered_data = explode(',', $raw_data);
  //this data is posted as "data:image/png;base64,", so we explode on comma
  if(isset($filtered_data[1])) {
    $unecoded = base64_decode($filtered_data[1]);
    //$file = file_save_data($unecoded, 'public://'.$product_canvas->product_canvas_id.'canvas_icon.png', FILE_EXISTS_RENAME);
    $file = file_save_data($unecoded, 'public://canvas/canvas_icon.png', FILE_EXISTS_RENAME);
    //$file = file_save_data($unecoded, 'public://created-canvas/'.$_FILES['image']['name'], FILE_EXISTS_RENAME);

    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    drupal_set_message(t('Your image has been saved, filename: @filename.'));
     $product_canvas->field_saved_images[LANGUAGE_NONE][0] = (array)$file;
    //$product_canvas->field_saved_images[$product_canvas->language][0] = (array)$file; //THIS WORKED
    file_usage_add($file, 'product_canvas', 'product_canvas',$product_canvas->product_canvas_id);      
       $wrapper = entity_metadata_wrapper('product_canvas', $product_canvas);
       $wrapper->field_saved_images->file->set($file ,array('class' => array('img-polaroid')));
       //$wrapper->field_saved_images->file->set($file);      
      $wrapper->save();
   }
 }

/**
 * Sets up content to show an individual Product Canvas.
 */

     function product_canvas_page_view($product_canvas, $view_mode = 'full') {
     $my_settings = array('canvasNid' => '1' ,'product_canvas' => $product_canvas->product_canvas_id);
     drupal_add_js( array ("product_canvas" => $my_settings), 'setting'); 
     libraries_load('fabric');
     $path =  drupal_get_path('module', 'product_canvas');


drupal_add_css(drupal_get_path('module', 'product_canvas') . '/css/font.css', array('group' => CSS_DEFAULT, 'every_page' => FALSE));
//drupal_add_css(drupal_get_path('module', 'product_canvas') . '/css/bootstrap-responsive.min.css', array('group' => CSS_DEFAULT, 'every_page' => FALSE));
drupal_add_css(drupal_get_path('module', 'product_canvas') . '/css/canvas.css', array('group' => CSS_DEFAULT, 'every_page' => FALSE));
drupal_add_css(drupal_get_path('module', 'product_canvas') . '/css/jquery.miniColors.css', array('group' => CSS_DEFAULT, 'every_page' => FALSE));
 
drupal_add_css(drupal_get_path('module', 'product_canvas') . '/css/tshirtFacing.css', array('group' => CSS_DEFAULT, 'every_page' => FALSE));
  drupal_add_css(drupal_get_path('module', 'product_canvas') . '/css/bootstrap.css', array('group' => CSS_DEFAULT, 'every_page' => FALSE));
   drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/bootstrap.js', 'file'); 
  //drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/bootstrap.min.js', 'file');
  drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/tshirtEditor.js', 'file');
    drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_myModal.js', 'file');
  drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_webfont_loader.js', 'file');
     drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_addText.js', 'file');
   //drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_savedImage.js', 'file');
   drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_save.js', 'file');
   drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/jquery.miniColors.min.js', 'file');
   drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_flip.js', 'file');
   drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_gHover.js', 'file');
   //drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_plert.js', 'file');
   drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/product_canvas_blert.js', 'file'); 
 drupal_add_js(drupal_get_path('module', 'product_canvas') . '/js/fabric.js', 'file');  
  drupal_add_js($path, array('scope' => 'footer'));

      $product_canvas_type = $product_canvas->entityType();
      $product_canvas_id = entity_id($product_canvas_type,$product_canvas);
        $product_canvas->label = filter_xss($product_canvas->label);
        $product_canvas->content = array();
        $product_canvas->content['#attached']['library'][] = array('system', 'drupal.ajax');
        $product_canvas->content['#attached']['library'][] = array('system', 'jquery.form');

       $product_canvas->label = filter_xss($product_canvas->label);

  if ($view_mode == 'full') {
    $product_canvas->content['#attached']['js'][] = array(
      'data' => $my_settings,
      'type' => 'setting',
        );
     }

       $product_canvas->content += array(
      '#theme'     => $product_canvas_type,    
      '#element'   => $product_canvas,
      '#view_mode' => $view_mode,
      '#language'  => LANGUAGE_NONE,
      );

   return entity_view('product_canvas_type', array($product_canvas), $view_mode);

  }
 
